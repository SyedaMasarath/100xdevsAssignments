/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  const todoArray=[];
//1
  app.get("/todos", (req, res) => {
    res.status(200).send(todoArray);
  });
//2
  app.get("/todos/:id", (req, res) => {
    const todo = todoArray.findIndex(t => t.id === parseInt(req.params.id));
    // const todoItem = todoArray.find(item => item.id === id);
    // if (todoItem!=NULL){
    //   res.status(200).send(todoItem);
    // }else
    // {
    //   res.status(404).send('Not Found');
    // }
    if (!todo) {
      return res.status(404).send("Not Found");
    } else {
      return res.json(todoArray[todo]);
    }
  });

  /*
    3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" id :"id"}*/ 

  app.post("/todos", (req,res)=>{
    const newTodo = {
      id: Math.random().toString(36).substring(2,7),
      title: req.body.title,
      description:req.body.description
      //completed : reqBody.completed
    }
    todoArray.push(newTodo);
    res.status(201).json(newTodo);
  });

  // 4. PUT /todos/:id - Update an existing todo item by ID
  // Description: Updates an existing todo item identified by its ID.
  // Request Body: JSON object representing the updated todo item.
  // Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
  // Example: PUT http://localhost:3000/todos/123
  // Request Body: { "title": "Buy groceries", "completed": true }

  app.put("/todos/:id", (req,res)=>{
    const todoIndex = todos.findIndex(t => t.id === parseInt(req.params.id));
      if (todoIndex === -1) {
        return res.status(404).send("Not Found");
      }
      else{
        todoArray[todoIndex].title = requestbody.title;
        todoArray[todoIndex].description =requestbody.description;
        res.status(200).json(todoArray[todoIndex]);
      }
    }
  );

  // 5. DELETE /todos/:id - Delete a todo item by ID
  // Description: Deletes a todo item identified by its ID.
  // Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
  // Example: DELETE http://localhost:3000/todos/123

  // - For any other route not defined in the server return 404

  app.delete("/todos/:id", (res,req)=>{
    const todoIndex = todoArray.findIndex(todo => (todo.id) === parseInt(req.params.id))

  if (todoIndex === -1) {
    return res.status(404).send("Not Found")
  }

  // const deletedTodo = todosArray.splice(todoIndex, 1)
  todosArray.splice(todoIndex, 1)
  res.status(200).send('Ok')
  });
  
/*
jQuery(json).each(function (index){
        if(json[index].FirstName == "Test1"){
            json.splice(index,1); // This will remove the object that first name equals to Test1
            return false; // This will stop the execution of jQuery each loop.
        }
}); */

app.use((req, res) => {
  return res.status(404).send("not found")
})

app.listen(3005, () => {
  console.log("listening on port 3000")
})

  

  module.exports = app;